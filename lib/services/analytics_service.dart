import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:smarview_app/constants/api_routes.dart';
import 'package:smarview_app/models/analytics_models/fr.dart';
import 'package:smarview_app/models/analytics_models/loitering.dart';
import 'package:smarview_app/models/http_exception.dart';

class Analytics {
  Dio dio = Dio();

  LoiteringModel loiteringData = LoiteringModel();
  FRModel frData = FRModel();
  FRRelModel frRelModel = FRRelModel();

  Future<LoiteringModel?> loiteringResults(
    BuildContext context, {
    String? id,
    String? accessToken,
    String? camId,
    String? start,
    String? end,
  }) async {
    final url = '${ApiRouter.baseUrl}${ApiRouter.loiteringUrl}$id';
    try {
      Response response = await dio.post(
        url,
        data: {
          "type": camId,
          "start": start,
          "end": end,
        },
        options: Options(
          headers: {
            "Content-Type": "application/json",
            "x-access-token": accessToken,
          },
        ),
      );
      if (response.statusCode == 200) {
        if (response.data['status'] == false) {
          throw HttpException(response.data['message']);
        } else {
          loiteringData = LoiteringModel.fromJson(response.data['data']);
          return loiteringData;
        }
      } else if (response.statusCode == 500) {
        // ignore: use_build_context_synchronously
        showSnackbar(context, 'Error message generated by the server');
      }
    } catch (error) {
      Logger().e(error.toString());
      return showSnackbar(context, "Somthing wrong please try anagin");
    }
  }

  Future<FRModel?> FRResults(
    BuildContext context, {
    String? id,
    String? accessToken,
    String? start,
    String? end,
  }) async {
    final url = '${ApiRouter.baseUrl}${ApiRouter.frUrl}$id';
    try {
      Response response = await dio.post(
        url,
        data: {
          "type": "cam_id",
          "start": start,
          "end": end,
        },
        options: Options(
          headers: {
            "Content-Type": "application/json",
            "x-access-token": accessToken,
          },
        ),
      );
      if (response.statusCode == 200) {
        if (response.data['status'] == false) {
          throw HttpException(response.data['message']);
        } else {
          frData = FRModel.fromJson(response.data['data']);
          frRelModel = FRRelModel.fromJson(response.data['rel']);
          return frData;
        }
      } else if (response.statusCode == 500) {
        // ignore: use_build_context_synchronously
        showSnackbar(context, 'Error message generated by the server');
      }
    } catch (error) {
      Logger().e(error.toString());
      return showSnackbar(context, "Somthing wrong please try anagin");
    }
  }

  showSnackbar(BuildContext ctx, String message) {
    ScaffoldMessenger.of(ctx).showSnackBar(
      SnackBar(
        content: Text(message),
      ),
    );
  }
}
